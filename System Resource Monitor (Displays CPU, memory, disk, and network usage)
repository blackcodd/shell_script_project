#!/bin/bash

# ---------- Color Codes ----------
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[1;36m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# ---------- Check dependencies ----------
if ! command -v sensors &> /dev/null; then
    echo -e "${RED}Warning:${NC} 'sensors' command not found. Please install lm-sensors to enable CPU temperature display."
    HAS_SENSORS=0
else
    HAS_SENSORS=1
fi

# ---------- Timestamp Function ----------
print_timestamp() {
    echo -e "${CYAN}Timestamp: $(date "+%Y-%m-%d %H:%M:%S")${NC}"
}

# ---------- Log Output Function ----------
log_output() {
    read -p "Save this output to a log file? (y/n): " save
    if [[ "$save" =~ ^[Yy]$ ]]; then
        log_file="system_log_$(date +%F).log"
        echo -e "$1" >> "$log_file"
        echo -e "${GREEN}Saved to $log_file${NC}"
    fi
}

# ---------- CPU Usage ----------
show_cpu_usage() {
    output=""
    output+="----- CPU Usage -----\n"
    output+="Timestamp: $(date "+%Y-%m-%d %H:%M:%S")\n"
    cpu_line=$(top -bn1 | grep "Cpu(s)")
    formatted_cpu=$(echo "$cpu_line" | awk '{print "User: " $2 "%, System: " $4 "%, Idle: " $8 "%"}')
    output+="$formatted_cpu\n"

    # CPU Temperature if available
    if [ "$HAS_SENSORS" -eq 1 ]; then
        temp_data=$(sensors | grep -i 'temp' | grep -E 'Package|Core')
        output+="\n----- CPU Temperature -----\n$temp_data\n"
    fi

    echo -e "${YELLOW}$output${NC}"
    log_output "$output"
}

# ---------- Memory Usage ----------
show_memory_usage() {
    output=""
    output+="----- Memory Usage -----\n"
    output+="Timestamp: $(date "+%Y-%m-%d %H:%M:%S")\n"
    output+="$(free -h)\n"
    echo -e "${YELLOW}$output${NC}"
    log_output "$output"
}

# ---------- Disk Usage ----------
show_disk_usage() {
    output=""
    output+="----- Disk Usage -----\n"
    output+="Timestamp: $(date "+%Y-%m-%d %H:%M:%S")\n"
    output+="$(df -h)\n"
    echo -e "${YELLOW}$output${NC}"
    log_output "$output"
}

# ---------- Network Usage ----------
show_network_usage() {
    output=""
    output+="----- Network Usage -----\n"
    output+="Timestamp: $(date "+%Y-%m-%d %H:%M:%S")\n"
    net_data=$(cat /proc/net/dev | tail -n +3 | awk '{print $1 "  Receive: " $2 " bytes  |  Transmit: " $10 " bytes"}')
    output+="$net_data\n"
    echo -e "${YELLOW}$output${NC}"
    log_output "$output"
}

# ---------- Auto Refresh Mode ----------
auto_refresh() {
    trap 'echo -e "\n${GREEN}Returning to main menu...${NC}"; sleep 1; return' SIGINT

    while true; do
        clear
        echo -e "${GREEN}==== Live System Resource Monitor (Refreshing Every 2s) ====${NC}"

        # CPU
        echo -e "${YELLOW}----- CPU Usage -----${NC}"
        top -bn1 | grep "Cpu(s)" | awk '{print "User: " $2 "%, System: " $4 "%, Idle: " $8 "%"}'

        # Temp (if available)
        if [ "$HAS_SENSORS" -eq 1 ]; then
            echo -e "\n${YELLOW}----- CPU Temperature -----${NC}"
            sensors | grep -i 'temp' | grep -E 'Package|Core'
        fi

        # Memory
        echo -e "\n${YELLOW}----- Memory Usage -----${NC}"
        free -h

        # Disk
        echo -e "\n${YELLOW}----- Disk Usage -----${NC}"
        df -h

        # Network
        echo -e "\n${YELLOW}----- Network Usage -----${NC}"
        cat /proc/net/dev | tail -n +3 | awk '{print $1 "  Receive: " $2 " bytes  |  Transmit: " $10 " bytes"}'

        echo -e "\n${CYAN}Press Ctrl+C to return to main menu...${NC}"
        sleep 2
    done
}



# ---------- Menu Loop ----------
while true; do
    echo -e "${GREEN}===== System Resource Monitor =====${NC}"
    echo -e "${CYAN}1.${NC} Display CPU Usage"
    echo -e "${CYAN}2.${NC} Display Memory Usage"
    echo -e "${CYAN}3.${NC} Display Disk Usage"
    echo -e "${CYAN}4.${NC} Display Network Usage"
    echo -e "${CYAN}5.${NC} Auto Refresh All Stats"
    echo -e "${CYAN}6.${NC} Exit"
    echo -e "${GREEN}===================================${NC}"
    read -p "Enter your choice (1-6): " choice

    case $choice in
        1) clear; show_cpu_usage ;;
        2) clear; show_memory_usage ;;
        3) clear; show_disk_usage ;;
        4) clear; show_network_usage ;;
        5) auto_refresh ;;
        6) echo -e "${GREEN}Exiting...${NC}"; break ;;
        *) echo -e "${RED}Invalid choice. Please enter 1-6.${NC}" ;;
    esac

    echo ""
    read -p "Press Enter to return to the main menu..."
    clear
done
